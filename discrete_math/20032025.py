
# import itertools.combinations # For getting the permutations etc.



def all_pairs(lst): # Thanks to https://stackoverflow.com/a/5360442/14577985
	if len(lst) < 2:
		yield []
		return
	if len(lst) % 2 == 1:
		# Handle odd length list
		for i in range(len(lst)):
			for result in all_pairs(lst[:i] + lst[i+1:]):
				yield result
	else:
		a = lst[0]
		for i in range(1,len(lst)):
			pair = (a,lst[i])
			for rest in all_pairs(lst[1:i]+lst[i+1:]):
				yield [pair] + rest



def is_valid_pairing(original, new_pairing):
	""" Check if new_pairing does not contain any original pairs. """
	original_pairs = set(original)
	for pair in new_pairing:
		if pair in original_pairs or tuple(reversed(pair)) in original_pairs:
			return False
	return True


def part_a():
	# a) 6 people are first paired up for a dance. Afterwards, they pair up to play a
	# game, where for some reason it is important that the two people in each pair
	# did not dance with each other. In how many ways can this be done?

	# all_pairs = list(itertools.combinations(range(6), 2)) # This is a list of all possible pairs of people.

	# Instead of filtering out the results generated by itertools, just use this function instead.
	N = 6
	possible_pair_arrangements = all_pairs(list(range(N)))
	possible_pair_arrangements = list(possible_pair_arrangements)
	print(possible_pair_arrangements)

	# Now iterate through these arrangements and filter out the arrangements which violate "that the two people in each pair did not dance with each other"

	o = 0




	for arrangement in possible_pair_arrangements:
		# Generate new arrangements
		new_arrangements = possible_pair_arrangements # list(all_pairs(list(range(N))))
		# Now check the condition.
		for new_arr in new_arrangements:

			if is_valid_pairing(arrangement, new_arr):
				o +=1 

			'''
			res = True
			for pair in new_arr:
				if pair in arrangement: # Check if a pair was in the original arrangement
					res = False
					break
			if res:
				o += 1
			'''
	print(o)




	return o





def s():
	sol = part_a()
	print(sol)
	return



if __name__=="__main__":
	s()
	exit(0)


